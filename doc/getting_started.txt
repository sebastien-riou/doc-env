= Doc Name
:sectids!:
:source-highlighter: rouge
FirstName LastName <doc@example.com>

== Introduction
Doc-env is a cross platform environment which provides several tools nicely integrated together to produce PDF documents.
The following tools installed on a https://www.docker.com[docker] linux container:

* asciidoctor
* asciidoctor-pdf
* asciidoctor-diagram
* wavedrom


== System requirement
=== Operating system
The doc-env should work on all recent versions of Linux, Windows and MacOS. It is tested only on Ubuntu 17 though.

You need to have https://docs.docker.com/engine/installation[docker] installed on your system.

== Installation (Ubuntu)
Clone doc-env on your computer
[source]
git clone https://github.com/sebastien-riou/doc-env

Run the install script. It builds the docker container and copy the doc-env script to /usr/bin.

WARNING: the install scripts needs an internet connection

[source]
cd doc-env
sudo ./install.sh

This should finnish by displaying "doc-env installed". If that's not the case, something went wrong. Please make sure you can run the hello world docker.

== How to generate this PDF? (Ubuntu)
Go in the doc directory and launch doc-env
[source]
cd doc
doc-env

Use the "pdf" command
[source]
pdf getting_started.txt

A PDF file should be created in the doc folder.

== Introduction to Asciidoc (asciidoctor flavour)
Asciidoc is a simple convention which allows to turn text files into PDFs.
Using text files brings many advantages. In particular it allows the documentation to be generated and versioned much in the same way as the source code.
This section describes the basic features offered by Asciidoc, look at the source of this PDF to find out how to create this or that.
You can also learn more online:

* http://asciidoctor.org/docs/user-manual
* https://github.com/asciidoctor/asciidoctor-pdf
* https://github.com/asciidoctor/asciidoctor-diagram

=== list
* item 1
* item 2

=== code block
[source,verilog]
always_ff @(posedge i_clk,posedge i_reset) begin
    if(i_reset) cnt_sbox <= {5{1'b0}};
    else cnt_sbox <= cnt_sbox + 1'b1;
end

=== Graphviz (dot)
[graphviz]
....
digraph G {
subgraph cluster0 {
node [style=filled,color=white];
style=filled;
color=lightgrey;
a0 -> a1 -> a2 -> a3;
label = "process #1";
}
subgraph cluster1 {
node [style=filled];
b0 -> b1 -> b2 -> b3;
label = "process #2";
color=blue
}
start -> a0;
start -> b0;
a1 -> b3;
b2 -> a3;
a3 -> a0;
a3 -> end;
b3 -> end;
start [shape=Mdiamond];
end [shape=Msquare];
}
....

More on this http://www.graphviz.org/pdf/dotguide.pdf

=== Plantuml
[plantuml]
....
class BlockProcessor
class DiagramBlock
class DitaaBlock
class PlantUmlBlock

BlockProcessor <|-- DiagramBlock
DiagramBlock <|-- DitaaBlock
DiagramBlock <|-- PlantUmlBlock
....

[plantuml]
....
start

while (data available?)
  :read data;
  :generate diagrams;
endwhile

stop
....

More on this http://plantuml.com/activity-diagram-beta

=== Wavedrom
[wavedrom]
....
{ signal : [
  { name: "clk",  wave: "p......" },
  { name: "bus",  wave: "x.34.5x",   data: "head body tail" },
  { name: "wire", wave: "0.1..0." },
]}
....

more on this:

* http://wavedrom.com
* https://github.com/wavedrom
* https://github.com/drom/wavedrom
